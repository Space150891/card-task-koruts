{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendWithValues = extendWithValues;\nexports.extendWithValue = extendWithValue;\n\nvar _shared = require(\"./shared\"); // Use fixture state for serializable values and fall back to base values\n\n\nfunction extendWithValues(obj, values) {\n  var extendedObj = {};\n  Object.keys(values).forEach(function (key) {\n    extendedObj[key] = extendWithValue(obj[key], values[key]);\n  });\n  return extendedObj;\n}\n\nfunction extendWithValue(baseValue, value) {\n  if (value.type === 'unserializable') {\n    return baseValue;\n  }\n\n  if (value.type === 'object') {\n    var baseObj = (0, _shared.isObject)(baseValue) ? baseValue : {};\n    return extendWithValues(baseObj, value.values);\n  }\n\n  if (value.type === 'array') {\n    var baseArr = (0, _shared.isArray)(baseValue) ? baseValue : [];\n    return value.values.map(function (v, idx) {\n      return extendWithValue(baseArr[idx], v);\n    });\n  }\n\n  return value.value;\n}","map":{"version":3,"sources":["/home/cubex/www/koruts/TASKS/node_modules/react-cosmos-shared2/dist/fixtureState/extendWithValues.js"],"names":["Object","defineProperty","exports","value","extendWithValues","extendWithValue","_shared","require","obj","values","extendedObj","keys","forEach","key","baseValue","type","baseObj","isObject","baseArr","isArray","map","v","idx"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AACAF,OAAO,CAACG,eAAR,GAA0BA,eAA1B;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB,C,CAEA;;;AACA,SAASH,gBAAT,CAA0BI,GAA1B,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,WAAW,GAAG,EAAlB;AACAV,EAAAA,MAAM,CAACW,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACzCH,IAAAA,WAAW,CAACG,GAAD,CAAX,GAAmBR,eAAe,CAACG,GAAG,CAACK,GAAD,CAAJ,EAAWJ,MAAM,CAACI,GAAD,CAAjB,CAAlC;AACD,GAFD;AAGA,SAAOH,WAAP;AACD;;AAED,SAASL,eAAT,CAAyBS,SAAzB,EAAoCX,KAApC,EAA2C;AACzC,MAAIA,KAAK,CAACY,IAAN,KAAe,gBAAnB,EAAqC;AACnC,WAAOD,SAAP;AACD;;AAED,MAAIX,KAAK,CAACY,IAAN,KAAe,QAAnB,EAA6B;AAC3B,QAAIC,OAAO,GAAG,CAAC,GAAGV,OAAO,CAACW,QAAZ,EAAsBH,SAAtB,IAAmCA,SAAnC,GAA+C,EAA7D;AACA,WAAOV,gBAAgB,CAACY,OAAD,EAAUb,KAAK,CAACM,MAAhB,CAAvB;AACD;;AAED,MAAIN,KAAK,CAACY,IAAN,KAAe,OAAnB,EAA4B;AAC1B,QAAIG,OAAO,GAAG,CAAC,GAAGZ,OAAO,CAACa,OAAZ,EAAqBL,SAArB,IAAkCA,SAAlC,GAA8C,EAA5D;AACA,WAAOX,KAAK,CAACM,MAAN,CAAaW,GAAb,CAAiB,UAAUC,CAAV,EAAaC,GAAb,EAAkB;AACxC,aAAOjB,eAAe,CAACa,OAAO,CAACI,GAAD,CAAR,EAAeD,CAAf,CAAtB;AACD,KAFM,CAAP;AAGD;;AAED,SAAOlB,KAAK,CAACA,KAAb;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendWithValues = extendWithValues;\nexports.extendWithValue = extendWithValue;\n\nvar _shared = require(\"./shared\");\n\n// Use fixture state for serializable values and fall back to base values\nfunction extendWithValues(obj, values) {\n  var extendedObj = {};\n  Object.keys(values).forEach(function (key) {\n    extendedObj[key] = extendWithValue(obj[key], values[key]);\n  });\n  return extendedObj;\n}\n\nfunction extendWithValue(baseValue, value) {\n  if (value.type === 'unserializable') {\n    return baseValue;\n  }\n\n  if (value.type === 'object') {\n    var baseObj = (0, _shared.isObject)(baseValue) ? baseValue : {};\n    return extendWithValues(baseObj, value.values);\n  }\n\n  if (value.type === 'array') {\n    var baseArr = (0, _shared.isArray)(baseValue) ? baseValue : [];\n    return value.values.map(function (v, idx) {\n      return extendWithValue(baseArr[idx], v);\n    });\n  }\n\n  return value.value;\n}"]},"metadata":{},"sourceType":"script"}