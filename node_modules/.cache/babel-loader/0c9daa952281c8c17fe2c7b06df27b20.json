{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectedFixtureId = void 0;\n\nvar _url = require(\"react-cosmos-shared2/url\");\n\nvar _shared = require(\"./shared\");\n\nvar selectedFixtureId = getSelectedFixtureId(); // The selected fixture ID is stored in session because components might change\n// the URL as a side effect. This means that after the renderer stores the\n// fixture ID initially, the renderer window can be refreshed and the same\n// fixture will be selected even if the URL no longer contains the fixture ID.\n\nexports.selectedFixtureId = selectedFixtureId;\n\nfunction getSelectedFixtureId() {\n  var urlParams = (0, _url.parseRendererUrlQuery)(location.search);\n\n  if (urlParams._fixtureId) {\n    setFixtureIdToSession(urlParams._fixtureId);\n    return urlParams._fixtureId;\n  }\n\n  return getFixtureIdFromSession();\n}\n\nfunction setFixtureIdToSession(fixtureId) {\n  sessionStorage.setItem('cosmosFixtureId', JSON.stringify(fixtureId));\n}\n\nfunction getFixtureIdFromSession() {\n  if ((0, _shared.isInsideCosmosPreviewIframe)()) {\n    return null;\n  }\n\n  var stringifiedFixtureId = sessionStorage.getItem('cosmosFixtureId');\n  return stringifiedFixtureId ? JSON.parse(stringifiedFixtureId) : null;\n}","map":{"version":3,"sources":["/home/cubex/www/koruts/TASKS/node_modules/react-cosmos/dist/dom/selectedFixtureId.js"],"names":["Object","defineProperty","exports","value","selectedFixtureId","_url","require","_shared","getSelectedFixtureId","urlParams","parseRendererUrlQuery","location","search","_fixtureId","setFixtureIdToSession","getFixtureIdFromSession","fixtureId","sessionStorage","setItem","JSON","stringify","isInsideCosmosPreviewIframe","stringifiedFixtureId","getItem","parse"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,0BAAD,CAAlB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIF,iBAAiB,GAAGI,oBAAoB,EAA5C,C,CAAgD;AAChD;AACA;AACA;;AAEAN,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;;AAEA,SAASI,oBAAT,GAAgC;AAC9B,MAAIC,SAAS,GAAG,CAAC,GAAGJ,IAAI,CAACK,qBAAT,EAAgCC,QAAQ,CAACC,MAAzC,CAAhB;;AAEA,MAAIH,SAAS,CAACI,UAAd,EAA0B;AACxBC,IAAAA,qBAAqB,CAACL,SAAS,CAACI,UAAX,CAArB;AACA,WAAOJ,SAAS,CAACI,UAAjB;AACD;;AAED,SAAOE,uBAAuB,EAA9B;AACD;;AAED,SAASD,qBAAT,CAA+BE,SAA/B,EAA0C;AACxCC,EAAAA,cAAc,CAACC,OAAf,CAAuB,iBAAvB,EAA0CC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAA1C;AACD;;AAED,SAASD,uBAAT,GAAmC;AACjC,MAAI,CAAC,GAAGR,OAAO,CAACc,2BAAZ,GAAJ,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAED,MAAIC,oBAAoB,GAAGL,cAAc,CAACM,OAAf,CAAuB,iBAAvB,CAA3B;AACA,SAAOD,oBAAoB,GAAGH,IAAI,CAACK,KAAL,CAAWF,oBAAX,CAAH,GAAsC,IAAjE;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectedFixtureId = void 0;\n\nvar _url = require(\"react-cosmos-shared2/url\");\n\nvar _shared = require(\"./shared\");\n\nvar selectedFixtureId = getSelectedFixtureId(); // The selected fixture ID is stored in session because components might change\n// the URL as a side effect. This means that after the renderer stores the\n// fixture ID initially, the renderer window can be refreshed and the same\n// fixture will be selected even if the URL no longer contains the fixture ID.\n\nexports.selectedFixtureId = selectedFixtureId;\n\nfunction getSelectedFixtureId() {\n  var urlParams = (0, _url.parseRendererUrlQuery)(location.search);\n\n  if (urlParams._fixtureId) {\n    setFixtureIdToSession(urlParams._fixtureId);\n    return urlParams._fixtureId;\n  }\n\n  return getFixtureIdFromSession();\n}\n\nfunction setFixtureIdToSession(fixtureId) {\n  sessionStorage.setItem('cosmosFixtureId', JSON.stringify(fixtureId));\n}\n\nfunction getFixtureIdFromSession() {\n  if ((0, _shared.isInsideCosmosPreviewIframe)()) {\n    return null;\n  }\n\n  var stringifiedFixtureId = sessionStorage.getItem('cosmosFixtureId');\n  return stringifiedFixtureId ? JSON.parse(stringifiedFixtureId) : null;\n}"]},"metadata":{},"sourceType":"script"}