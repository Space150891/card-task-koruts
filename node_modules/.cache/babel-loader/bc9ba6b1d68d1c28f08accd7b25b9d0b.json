{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areNodesEqual = areNodesEqual;\n\nvar _lodash = require(\"lodash\");\n\nvar _getComponentName = require(\"./getComponentName\");\n\nvar _isReactElement = require(\"./isReactElement\");\n\nfunction areNodesEqual(node1, node2, strictTypeCheck) {\n  if ((0, _isReactElement.isReactElement)(node1) && (0, _isReactElement.isReactElement)(node2)) return areElementsEqual(node1, node2, strictTypeCheck);\n  if (Array.isArray(node1) && Array.isArray(node2)) return areArrayNodesEqual(node1, node2, strictTypeCheck);\n  if (isObject(node1) && isObject(node2)) return areObjectsEqual(node1, node2);\n  return (0, _lodash.isEqual)(node1, node2);\n}\n\nfunction areElementsEqual(element1, element2, strictTypeCheck) {\n  if (!areElementTypesEqual(element1.type, element2.type, strictTypeCheck)) return false; // Don't compare private element attrs like _owner and _store, which hold\n  // internal details and have auto increment-type attrs\n\n  return element1.key === element2.key && // @ts-ignore\n  element1.ref === element2.ref && // Children (and props in general) can contain Elements and other Nodes\n  areNodesEqual(element1.props, element2.props, strictTypeCheck);\n}\n\nfunction areElementTypesEqual(type1, type2, strictTypeCheck) {\n  return strictTypeCheck ? type1 === type2 : (0, _getComponentName.getComponentName)(type1) === (0, _getComponentName.getComponentName)(type2);\n}\n\nfunction areArrayNodesEqual(node1, node2, strictTypeCheck) {\n  if (node1.length !== node2.length) return false;\n  return node1.every(function (node, nodeIndex) {\n    return areNodesEqual(node, node2[nodeIndex], strictTypeCheck);\n  });\n}\n\nfunction isObject(node) {\n  return (0, _lodash.isPlainObject)(node);\n}\n\nfunction areObjectsEqual(object1, object2) {\n  if (!(0, _lodash.isEqual)(Object.keys(object1), Object.keys(object2))) return false;\n  return Object.keys(object1).every(function (key) {\n    return (0, _lodash.isEqualWith)(object1[key], object2[key], function (value1, value2) {\n      return typeof value1 === 'function' && typeof value2 === 'function' ? value1 === value2 || value1.toString() === value2.toString() : (0, _lodash.isEqual)(value1, value2);\n    });\n  });\n}","map":{"version":3,"sources":["/home/cubex/www/koruts/TASKS/node_modules/react-cosmos-shared2/dist/react/areNodesEqual.js"],"names":["Object","defineProperty","exports","value","areNodesEqual","_lodash","require","_getComponentName","_isReactElement","node1","node2","strictTypeCheck","isReactElement","areElementsEqual","Array","isArray","areArrayNodesEqual","isObject","areObjectsEqual","isEqual","element1","element2","areElementTypesEqual","type","key","ref","props","type1","type2","getComponentName","length","every","node","nodeIndex","isPlainObject","object1","object2","keys","isEqualWith","value1","value2","toString"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areNodesEqual = areNodesEqual;\n\nvar _lodash = require(\"lodash\");\n\nvar _getComponentName = require(\"./getComponentName\");\n\nvar _isReactElement = require(\"./isReactElement\");\n\nfunction areNodesEqual(node1, node2, strictTypeCheck) {\n  if ((0, _isReactElement.isReactElement)(node1) && (0, _isReactElement.isReactElement)(node2)) return areElementsEqual(node1, node2, strictTypeCheck);\n  if (Array.isArray(node1) && Array.isArray(node2)) return areArrayNodesEqual(node1, node2, strictTypeCheck);\n  if (isObject(node1) && isObject(node2)) return areObjectsEqual(node1, node2);\n  return (0, _lodash.isEqual)(node1, node2);\n}\n\nfunction areElementsEqual(element1, element2, strictTypeCheck) {\n  if (!areElementTypesEqual(element1.type, element2.type, strictTypeCheck)) return false; // Don't compare private element attrs like _owner and _store, which hold\n  // internal details and have auto increment-type attrs\n\n  return element1.key === element2.key && // @ts-ignore\n  element1.ref === element2.ref && // Children (and props in general) can contain Elements and other Nodes\n  areNodesEqual(element1.props, element2.props, strictTypeCheck);\n}\n\nfunction areElementTypesEqual(type1, type2, strictTypeCheck) {\n  return strictTypeCheck ? type1 === type2 : (0, _getComponentName.getComponentName)(type1) === (0, _getComponentName.getComponentName)(type2);\n}\n\nfunction areArrayNodesEqual(node1, node2, strictTypeCheck) {\n  if (node1.length !== node2.length) return false;\n  return node1.every(function (node, nodeIndex) {\n    return areNodesEqual(node, node2[nodeIndex], strictTypeCheck);\n  });\n}\n\nfunction isObject(node) {\n  return (0, _lodash.isPlainObject)(node);\n}\n\nfunction areObjectsEqual(object1, object2) {\n  if (!(0, _lodash.isEqual)(Object.keys(object1), Object.keys(object2))) return false;\n  return Object.keys(object1).every(function (key) {\n    return (0, _lodash.isEqualWith)(object1[key], object2[key], function (value1, value2) {\n      return typeof value1 === 'function' && typeof value2 === 'function' ? value1 === value2 || value1.toString() === value2.toString() : (0, _lodash.isEqual)(value1, value2);\n    });\n  });\n}"]},"metadata":{},"sourceType":"script"}